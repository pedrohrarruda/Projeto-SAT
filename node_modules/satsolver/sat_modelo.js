
exports.solve = function(filename) {
  formula = readFormula(filename)
  let result = doSolve(formula.clauses, formula.variables)
  console.log(result)
  return result // two fields: isSat and satisfyingAssignment
}

// Receives the current assignment and produces the next one
function nextAssignment(currentAssignment,quantos) {
 
 formula.variables[0][quantos] = true
  let resuts = []
  for (let i = 0;i<currentAssignment.length;i++) {
    let rest = nextAssignment(currentAssignment.slice(0, i).concat(currentAssignment.slice(i + 1)));
    if(!rest.length) {
      resuts.push([currentAssignment[i]])
    } else {
      for(let j=0;j<rest.length;j++) {
        resuts.push([currentAssignment[i]].concat(rest[j]))
      }
    }
  }
  newAssignment = resuts
  return newAssignment
}

function doSolve(clauses, assignment) {
  let isSat = false
  let resultado = false
  let acabou = false
  var contador = 0
  var quantos = 0
  while ((!isSat) && (!resultado) && (!acabou)) {
    // does this assignment satisfy the formula? If so, make isSat true. 
    let tentativa = false
    for(a = 0;a<assignment.length;a++){
      let claustrue = 0
      for(b=0;b<clauses.length;b++){
        for(c=0;c<clauses[b].length;c++){
          let vari1 = clauses[b][c]
          let vari2 = Math.abs(vari1)
          let vari3 = vari2
          vari2 = assignment[a][(vari3 - 1)]
          if(vari1 < 0){
            (!vari2)
          }
          if(vari2 == true){
            claustrue++
            break;
          }
        }
        if(claustrue == clauses.length){
          tentativa = true
          break;
        }
      }
    var assintent = assignment[a]
    if(tentativa == true){
      resultado = true
      isSat = true
    }
  }
    // if not, get the next assignment and try again.
    if(contador == assignment.length){
      acabou = true
    } 
    assignment = nextAssignment(formula.variables,quantos)
    quantos++
    contador++
  }
  let result = {'isSat': isSat, satisfyingAssignment: null}
  if (isSat) {
    result.satisfyingAssignment = assintent
  }
  return result
}
  
function readFormula(filename) {
  // First read the lines of text of the file and only afterward use the auxiliary functions.
  const fs = require('fs')
  var text = fs.readFileSync('H:/sat-master/'+filename+'.cnf', 'utf8').split(/[\r\n]+/)   
  let clauses = readClauses(text)
  let variables = readVariables(clauses)
  
  // In the following line, text is passed as an argument so that the function
  // is able to extract the problem specification.
  let specOk = checkProblemSpecification(text, clauses, variables)

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clauses
    result.variables = variables
  }
  return result
}

function readClauses(text){
  let linha = ""
  for(a = 0;a<text.length;a++){
    if( !(text[a].charAt(0) == 'c') && !(text[a].charAt(0) == 'p') ){
      str = text[a]
      linha = linha + str + " "
      console.log(text[a])
    }
  }
  console.log(linha)
  let results = linha.split('0')
  results.pop()
  let object = []
  for(b = 0;b<results.length;b++){
      let meh 
      meh = results[b].split(" ")
      if(b == 0){
      meh.pop()
      }else{
          meh.shift()
          meh.pop()
      }
      object.push(meh)
  }
  return object
}

function readVariables(clauses){
  let array = []
  for(a = 0; a<clauses.length;a++){
    for(b = 0 ;b<clauses[a].length;b++){
      if(clauses[a][b] > array.length){
        for(c = array.length;c<Math.abs(clauses[a][b]);c++){
        array.push(false)
      }
      }
    }
  }
  let variaves = []
  variaves.push(array) 
  return variaves
}

function checkProblemSpecification(text, clauses, variables){
  let result = true
  return result
}